<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>particle field</title>
		<style type="text/css">
			body {
				background: #191919;
			}
		</style>
		<script type="text/javascript">
/*
	'Variables from URL' code written by Chris Coyier of css-tricks.com
		https://css-tricks.com/snippets/javascript/get-url-variables/

	Particle field code written by Vladimir Kramer on Github.io (modified here, of course)
		https://codepen.io/draftmethod/pen/NpryyN

	Everything else by TanzNukeTerror
*/
			document.addEventListener('DOMContentLoaded', function(){
				function getQueryVariable(variable) {
					var query = window.location.search.substring(1);
					vars = query.split('&');
					for (var i = 0; i < vars.length; i++){
						var pair = vars[i].split('=');
						if(pair[0] == variable) {
							return pair[1];
						}
					}
					return(false);
				}
				var hue_start = getQueryVariable('hue_start') || 213;
				var hue_end = getQueryVariable('hue_end') || 213;
				var light_override = getQueryVariable('light_override') || 0;


				var body = document.body;
				body.insertAdjacentHTML('beforeend', '<canvas id="canvas" />');
				body.style.cssText = 'margin: 0; overflow: hidden;';

				var width, height, canvas, ctx, circles, target, animateHeader = true;

				initHeader();
				addListeners();

				function initHeader() {
					width = window.innerWidth;
					height = window.innerHeight;
					target = {x: 0, y: height};

					canvas = document.getElementById('canvas');
					canvas.width = width;
					canvas.height = height;
					ctx = canvas.getContext('2d');

					//create particles
					circles = [];
					for(var x = 0; x < width*0.5; x++) {
						var c = new Circle();
						circles.push(c);
					}
					animate();
				}

				function animate() {
					if (animateHeader) {
						ctx.clearRect(0,0,width,height);
						for(var i in circles) {
							circles[i].draw();
						}
					}
					requestAnimationFrame(animate);
				}

				//canvas manip
				function Circle() {
					var _this = this;
					(function(){
						_this.pos = {};
						init();
						console.log(_this);
					})();

					function init() {
						_this.pos.x = Math.random()*width;
						_this.pos.y = height+Math.random()*100;
						_this.alpha = 0.2 + Math.random()*0.3;
						_this.scale = 0.1+Math.random()*0.3;
						_this.velocity = Math.random()*2;
					}

					this.draw = function() {
						if(_this.alpha <= 0) {
							init();
						}
						_this.pos.y -= _this.velocity;
						_this.alpha -= 0.002;
						ctx.beginPath();
						ctx.arc(_this.pos.x, _this.pos.y, _this.scale*12, 0, 2 * Math.PI, false);

						var hue_range = Math.abs(hue_start-hue_end);

						if (hue_end < hue_start) {
							var hue_scale = (hue_start-(hue_range*(_this.velocity/2)));
						} else {
							var hue_scale = ((hue_range*(_this.velocity/2))+hue_start);
						}
						if (light_override == 0) {
							light_override = ((50*(_this.velocity/2))+50);
						}

						ctx.fillStyle = 'hsla('+ hue_scale +', 100%, '+ light_override +'%, '+ _this.alpha +')';
						ctx.fill();
					}
				}
			});
		</script>
	</head>
	<body>
		
	</body>
</html>
